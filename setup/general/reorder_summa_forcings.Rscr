#!/usr/bin/env Rscript
# commands to re-order a forcing file to match the order given in an hru_list
#   will also subset a file, but in that case the unwanted records are moved to the end and must be
#   deleted (eg with ncks) after the fact
# A. Wood, 2019

# --- read command line arguments
args <- commandArgs(TRUE)
#args <- c("hucIds.wUShuc12.v4.txt", "hruId", "../forcings/gmet_huc12/ens_forc.WEST.huc12.2007.001.nc")
# for debugging uncomment next lines and hardwire obs
if(length(args) != 3) {
  message("Usage: ARGS are <input hru_order_list> <id_name> <input forcing file>")
  quit("no")    # don't save R program state
}

library(ncdf4)

# --- settings (from args)
new_order_list <- as.character(args[1])   # file listing order of ids desired for variables
id_name        <- as.character(args[2])
infile         <- as.character(args[3])
outfile        <- paste(infile, ".reorder" , sep="")

# --- read new hru order
new_forc_hrus <- scan(new_order_list)

# --- copy input file to output file, open output file
file.copy(infile, outfile, overwrite=TRUE)
ncout <- nc_open(outfile, write=TRUE)

# --- get IDs from existing file, create new ordering
#     missing records from new desired id list are included at the end
#     but this script doesn't remove them from the output file
#     they have to be excluded in a post-process
ids        <- ncvar_get(ncout, id_name)
new_order  <- match(new_forc_hrus, ids)  # returns new data index
newRecs    <- length(new_order)
message("found ", newRecs, " IDs to write in new desired order")

if(newRecs   < length(ids)) {
  missing    <- subset(ids, !(ids %in% new_forc_hrus))   # find any missing ids
  miss_order <- match(missing, ids)                  # get their data indices
  new_order  <- c(new_order, miss_order)   # combine to make full list again
  missRecs   <- length(missing)
  message("found ", missRecs, " other IDs missing from the desired order")
}

# --- apply new order to all variables in file, and write over old ones
#   note: throws warning for int8 hrus, but still writes them
vars <- names(ncout[['var']])
for(v in 1:length(vars)) {
  message("reading, reordering, writing variable ", vars[v])
  tmpdat <- ncvar_get(ncout, vars[v])

  if(vars[v] == id_name) {
    ncvar_put( ncout, vars[v], tmpdat[new_order] )    # for static variable
  } else if(vars[v] != "data_step") {
    ncvar_put( ncout, vars[v], tmpdat[new_order, ] )  # for variable with time dimension
  }
}

message("--------------------------------------------------------------------------")
message("DONE: output file is: ", outfile)
if("missing" %in% ls()) {
  message("The desired new order was smaller than the input hrus")
  message(" *** to get only the desired subset, remove the last ", missRecs, " records")
  message(" *** -- ie, keep the first ", newRecs, " records")
}
message("--------------------------------------------------------------------------")

nc_close(ncout)

# ---- DONE ----



# --- misc stuff to add a new static variable (not used)
# add new mask variable (for domain specific application)
#hru_dim <- (ncout[['dim']])
#fillvalue <- 0
#maskvals <- rep(1, length(tmpdat))
#tmp_def <- ncvar_def("mask","",hru_dim,fillvalue,"mask value",prec="integer")
#ncvar_add(ncout, tmp_def, maskvals)
#ncvar_put(ncout,"mask",maskvals)
